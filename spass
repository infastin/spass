#!/usr/bin/env bash

# vim: set fdm=marker : #

# Colors {{{ #

black=$(tput setaf 0)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
lime_yellow=$(tput setaf 190)
powder_blue=$(tput setaf 153)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
white=$(tput setaf 7)
normal=$(tput sgr0)
underline=$(tput smul)
bold=$(tput bold)

# }}} #

# Cards {{{ #

cards=()

while read -r card
do
	cards+=("$card")
done < <(pactl list sinks short | awk '{print $2}' | grep -oP "alsa_output.\K(.+)(?=\.[\w\-]+)")

# }}} #

# Global variables {{{ #

declare -A opts=( 
	["port"]="" 
	["card"]=""
)

toStart=1

# }}} #

# Config {{{ #

config="$HOME/.config/spass.conf"

function GenerateConfig() {
	if touch "$config"
	then
		printf "defaultCard=%s\n" "${cards[0]}" >> "$config"
		printf "defaultPort=59010\n" >> "$config"
	else
		printf "Could not create config file: %s" "$?"
		return $?
	fi
}

if [[ -f "$config" ]]
then
	source "$config"

	if [[ -z ${defaultPort+x} ]] || [[ -z ${defaultPort+x} ]] || ! [[ -n "$defaultPort" ]] || ! [[ -n "$defaultCard" ]] 
	then
		GenerateConfig
		source "$config"
	fi
else
	GenerateConfig
	source "$config"
fi

# }}} #

# Functions {{{ #

function IsNumber() {
	if [[ "$1" =~ ^-?[0-9]+$ ]]
	then
		printf "1"
	else
		printf "${red}${bold}%s is not a number${normal}\n" "$1"
	fi
}

function IsCard() {
	IsNumberOutput=$(IsNumber $1)
	if [[ "$IsNumberOutput" == "1" ]]
	then
		if (( $1 <= ${#cards[@]} )) && (( $1 > 0 ))
		then
			printf "1"
		else
			printf "${red}${bold}There is no such card with number %d${normal}\n" "$1"
		fi
	else
		printf "%s\n" "$IsNumberOutput"
	fi

}

function IsPort() {
	IsNumberOutput=$(IsNumber $1)
	if [[ "$IsNumberOutput" == "1" ]]
	then
		if (( $1 > 0 )) && (( $1 <= 99999 ))
		then
			printf "1"
		else
			printf "${red}${bold}%d is less than 0 or bigger than 99999${normal}\n" "$1"
		fi
	else
		printf "%s\n" "$IsNumberOutput"
	fi
}

function PrintCards() {
	printf "Cards list: \n"

	if [[ "$1" == "exit" ]]
	then
		printf "%-3s0. Exit\n" ""
	fi

	for i in "${!cards[@]}"
	do
		name=$(pactl list cards | grep -A18 "Card #" | grep -A17 "${cards[$i]}" | grep -oP "device.product.name = \K(.+)" | tr -d '"')
		printf "%-3s%d. %-30s %s\n" "" "$((i + 1))" "alsa_card.${cards[$i]}" "$name" 
	done
}

function ChooseCard() {
	PrintCards "exit"
	
	printf "\n"

	while true
	do
		read -p "Choose card number: " number
		printf "\n"

		if [[ "$number" == "0" ]]
		then
			toStart=0
			break
		else
			output="$(IsCard $number)"
			if [[ "$output" == "1" ]]
			then
				if [[ "${cards["$((number - 1))"]}" != "$defaultCard" ]]
				then
					opts["card"]="${cards["$((number - 1))"]}"
				fi

				break
			else
				printf "%s\n" "$output"
			fi
		fi
	done
}

function ChoosePort() {
	while true
	do
		read -p "Enter desired port (0 < port <= 99999). Enter 0 to exit: " port
		printf "\n"

		if [[ "${port}" == "0" ]] 
		then
			toStart=0
			break
		else
			output=$(IsPort ${port})
			if [[ "$output" == "1" ]]
			then
				if [[ "${port}" == "$defaultPort" ]]
				then
					opts["port"]="${port}"
				fi

				break
			else
				printf "%s\n" "$output"
			fi
		fi
	done
}

function StereoMono() {
	if [[ "$1" == "1" ]]
	then
		printf "Mono"
	else 
		if [[ "$1" == "2" ]]
		then
			printf "Stereo"
		fi
	fi
}

function SetOpt() {
	declare -A optsOut=(
		["port"]=$(IsPort $1)
		["card"]=$(IsCard $1)
	)

	if [[ "$1" == "0" ]]
	then
		exit
	else
		if [[ -n "$1" ]]
		then
			out=${optsOut[$2]}
			if [[ "$out" == "1" ]]
			then
				if [[ "$2" == "card" ]]
				then
					opts["card"]="${cards["$(($1 - 1))"]}"
				elif [[ "$2" == "port" ]]
				then
					opts["port"]=$1
				fi
			else
				printf "%s\n" "$out"
			fi
		fi

		if ! [[ -n "${opts[$2]}" ]]
		then
			case "$2" in
				"port")
					ChoosePort
				;;
				"card")
					ChooseCard
				;;
			esac

			if [[ "${opts[$2]}" == "0" ]]
			then
				exit
			fi
		fi
	fi
}

# }}} #

# Script itself {{{ #

case "$1" in
	set)
		while [ "${2:-}" != "" ]
		do
			case "$2" in
				-c|--card)
					if [[ "$3" == "--port" ]] || [[ "$3" == "--card" ]]
					then
						SetOpt "" "card"
						shift 1
					else
						SetOpt "$3" "card"
						shift 2
					fi
				;;
				-p|--port)
					if [[ "$3" == "--port" ]] || [[ "$3" == "--card" ]]
					then
						SetOpt "" "port"
						shift 1
					else
						SetOpt "$3" "port"
						shift 2
					fi
				;;
				*)
					break
				;;
			esac
		done
	;;
	list)
		toStart=0

		PrintCards
	;;
	config)
		toStart=0

		while true
		do
			printf "Config options (the current values in brackets):\n"
			printf "%-3s%s\n" "" "0. Exit"
			printf "%-3s%s\n" "" "1. Default card ($defaultCard)"
			printf "%-3s%s\n" "" "2. Audio port ($defaultPort)"

			printf "\n"

			read -p "Choose config option: " confNumber
			printf "\n"

			if [[ "$confNumber" != "0" ]]
			then
				IsNumberOutput=$(IsNumber $confNumber)
				if [[ "$IsNumberOutput" == "1" ]]
				then
					if (( $confNumber > 0 )) && (( $confNumber <= 2 ))
					then
						case "$confNumber" in
							1)
								printf "${magenta}${bold}You are changing default card number ($defaultCard)${normal}\n"
								ChooseCard

								if [[ "${opts["card"]}" == "" ]] || [[ "${opts["card"]}" == "$defaultCard" ]]
								then
									printf "${yellow}${bold}Nothing changed.${normal}\n\n"
								else
									sed -i -E "s/defaultCard=.+/defaultCard=${opts["card"]}/" "$config"
									printf "${green}${bold}Default card was successful changed to ${opts["card"]}${normal}\n\n"

									defaultCard=${opts["card"]}
								fi

							;;
							2)
								printf "${magenta}${bold}You are changing audio port ($defaultPort)${normal}\n"

								ChoosePort

								if [[ "${opts["port"]}" == "" ]] || [[ "${opts["port"]}" == "$defaultPort" ]]
								then
									printf "${yellow}${bold}Nothing changed.${normal}\n\n"
								else
									sed -i -E "s/defaultPort=[0-9]+/defaultPort=${opts["port"]}/" "$config"
									printf "${green}${bold}Audio port was successful changed to ${opts["port"]}${normal}\n\n"

									defaultPort=${opts["port"]}
								fi
							;;
							*)
								printf "${red}${bold}There is no such config option with number %d${normal}\n" "$confNumber"
							;;
						esac
					else
						printf "${red}${bold}There is no such config option with number %d${normal}\n" "$confNumber"
					fi
				else
					printf "%s\n" "$IsNumberOutput"
				fi
			else
				exit
			fi
		done
	;;
	generate)
		toStart=0

		GenerateConfig	
	;;
	version)
		toStart=0
		
		printf "Simple Pulse Audio Share Script version 1.0\n"
	;;
	help)
		toStart=0

		printf "%-11s %s\n" "Usage: spass" "[COMMAND] [set [-OPTION [NUMBER]]...]"

		printf "You can enter just 'spass' to start script with default options.\n\n"

		printf "%-3s%-16s %s\n"  ""  "list" 	"List all available cards"
		printf "%-3s%-16s %s\n"  ""  "config"  	"Show and configure default options"
		printf "%-3s%-16s %s\n"  ""  "help"    	"Show help"
		printf "%-3s%-16s %s\n"  ""  "quit"    	"Stop audio streaming"
		printf "%-3s%-16s %s\n"  ""  "generate" "Automatically generate config if it is missing or corrupted"
		printf "%-3s%-16s %s\n"  ""  "version" 	"Show version"
		printf "%-3s%-16s %s\n"  ""  "set" 		"Set startup options. This doesn't change config"
		printf "\n"

		printf "Startup options.\n"

		printf "%-3s%-16s %s\n"  ""  "--card [NUMBER]"  "Set card by it's number from list command. If not specified, you can pick it interactively"
		printf "%-3s%-16s %s\n"  ""  "--port [NUMBER]"  "Set port. If not specified, you can pick it interactively"
		printf "\n"
	;;
	quit)
		toStart=0
		
		runningModule=$(pactl list | grep tcp -B1 | grep M | sed 's/[^0-9]//g')

		if [[ -n "$runningModule" ]]
		then
			printf "Unloading a running module #%d\n" "$runningModule"
			pactl unload-module "$runningModule"
		fi
	;;
	*)
		if [[ "$1" != "" ]]
		then
			printf "Help: %s help\n" "$0"
			exit
		fi
	;;
esac

if (( toStart == 1 ))
then
	$0 quit

	if [[ -n "${opts["card"]}" ]]; then defaultCard=${opts["card"]}; fi
	if [[ -n "${opts["port"]}" ]]; then defaultPort=${opts["port"]}; fi

	if ! [[ -n $(pactl list sinks | grep "$defaultCard") ]]
	then
		GenerateConfig
		source "$config"
	fi

	sinkl=$(pactl list sinks short | grep "$defaultCard")
	
	sinkn=$(awk '{print $1}' <<< "$sinkl")
	sink=$(awk '{print $2}' <<< "$sinkl")
	monitor="${sink}.monitor"

	format=$(awk '{print $4}' <<< "$sinkl")
	channels=$(awk '{print $5}' <<< "$sinkl" | sed 's/ch//')
	rate=$(awk '{print $6}' <<< "$sinkl" | sed 's/Hz//')

	ip=$(ip route get 1.2.3.4 | awk '{print $7}')
	card="alsa_card.$defaultCard"

	pactl set-default-sink "$sinkn" > /dev/null 2>&1
	moduleID=$(pactl load-module module-simple-protocol-tcp rate="$rate" format="$format" channels="$channels" source="$monitor" record="true" port="$defaultPort" listen="$ip")

	if [[ -n "$moduleID" ]]
	then
		printf "Starting a module:\n"
		printf "%-3s%-20s%s\n" "" "Card" "$card"
		printf "%-3s%-20s%s\n" "" "Sink" "$sink"
		printf "%-3s%-20s%s\n" "" "Monitor Source" "$monitor"
		printf "%-3s%-20s%s\n" "" "IP" "$ip"
		printf "%-3s%-20s%s\n" "" "Port" "$defaultPort"
		printf "%-3s%-20s%s\n" "" "Mono/Stereo" "$(StereoMono $channels)"
		printf "%-3s%-20s%s\n" "" "Sample rate" "$rate"
		printf "%-3s%-20s%s\n" "" "Module ID" "$moduleID"
	fi
fi

# }}} #
